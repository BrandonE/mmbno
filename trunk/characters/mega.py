# -*- coding: utf-8 -*-# This file is part of MMBN Online# MMBN Online is free software: you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation, either version 3 of the License, or# (at your option) any later version.# MMBN Online is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.# You should have received a copy of the GNU General Public License# along with MMBN Online.  If not, see <http://www.gnu.org/licenses/>.# Copyright (C) 2008-2010 Chris Santiago and Brandon Evans.# http://mmbnonline.net/"""A version of the Character class."""from character import Character as Parentfrom config import config__all__ = ['Character']class Character(Parent):    """A class to base the characters off of."""    def die(self):        """Handle death."""        self.health = 0    def defaultdeath(self):        """The default handling for checking if a character should die."""        if self.health <= 0:            self.die()    def defaultheal(self, health):        self.health += health        if self.health > self.maxhealth:            self.health = self.maxhealth    def defaulthit(self, power):        """The default handling for damage."""        self.health -= power        self.death()    def defaultmove(self, rows, cols, blue, force):        # Grab the panel the character is on.        panel = self.owner.field[self.row][self.col]        # Define the new coordinates.        newrow = self.row - rows        newcol = self.col + cols        if not force:            # If the new coordinates aren't on the field, fail.            if newrow < 0 or newrow > 2 or newcol < 0 or newcol > 5:                return        # As the coordinates are valid, grab the new panel.        newpanel = self.owner.field[newrow][newcol]        if not force:            # If the panel doesn't contain the character, something went            # horribly wrong.            if panel['character'] != self:                raise Exception('Field desync')            # If the new panel is out of bounds, contains a character, is            # broken without the character having airshoes, or the character is            # paralyzed, fail.            if (                (                    ((newcol > 2) ^ newpanel['stolen']) ^                    blue != config['blue']                ) or                newpanel['character'] or                (                    newpanel['status'] == 'broken' and                    not 'airshoes' in self.status                ) or                'paralyzed' in self.status            ):                return        # Empty the old panel.        panel['character'] = None        # Add the character to the new panel.        newpanel['character'] = self        if not 'floatshoes' in self.status:            # If the panel is cracked and the character moved, break it.            if (                panel['status'] == 'cracked' and                (self.row != newrow or self.col != newcol)            ):                panel['status'] = 'broken'            # If the character moved onto a lava panel and is not a fire type            if newpanel['status'] == 'lava' and self.type != 'fire':                self.hit(10, 'fire')                # Revert the panel.                newpanel['status'] = 'normal'        # Adjust to the new coordinates.        self.row = newrow        self.col = newcol    def defaultslide(self, rows, cols, blue, force):        if not 'floatshoes' in self.status:            # Slide if on ice.            if self.owner.field[self.row][self.col]['status'] == 'ice':                self.move(rows, cols, blue, force)    def defaulttime(self):        panel = self.owner.field[self.row][self.col]        # If the character is on a grass panel and is a wood type        if panel['status'] == 'grass' and self.type == 'wood':            self.heal(1)        # If the character is on a poison panel and does not have floatshoes        # activated        if panel['status'] == 'poison' and not 'floatshoes' in self.status:            self.hit(1)    def properties(self):        """Overwrite the default properties."""        self.health = 500        self.maxhealth = self.health        self.name = 'MegaMan.EXE'        self.power = 1